<?php

/**
 *  _   __ __ _____ _____ ___  ____  _____
 * | | / // // ___//_  _//   ||  __||_   _|
 * | |/ // /(__  )  / / / /| || |     | |
 * |___//_//____/  /_/ /_/ |_||_|     |_|
 * @link https://vistart.me/
 * @copyright Copyright (c) 2016 - 2017 vistart
 * @license https://vistart.me/license/
 */

namespace rhosocial\user\tests\models\invitation;

use rhosocial\user\tests\data\User;
use rhosocial\user\tests\TestCase;

/**
 * Class RegistrationTest
 * @package rhosocial\user\tests\models\invitation
 * @version 1.0
 * @author vistart <i@vistart.me>
 */
class RegistrationTest extends TestCase
{
    /**
     * @var User
     */
    protected $user;

    /**
     * @var User
     */
    protected $invitee;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = new User(['password' => '123456']);
        $this->assertTrue($this->user->register());
    }

    protected function tearDown()
    {
        if ($this->user && !$this->user->getIsNewRecord()) {
            $this->user->deregister();
        }
        if ($this->invitee && !$this->invitee->getIsNewRecord()) {
            $this->invitee->deregister();
        }
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /**
     * @group invitation
     * @group register
     */
    public function testEmpty()
    {
        $this->assertInstanceOf(User::class, $this->user);
        $this->assertEmpty($this->user->invitationRegistrations);
    }

    /**
     * @group invitation
     * @group register
     * @depends testEmpty
     */
    public function testRegister()
    {
        $this->invitee = new User(['password' => '123456']);
        $this->assertTrue($this->invitee->registerAccordingToInvitation([], [], $this->user));
        $invitationRegistrations = $this->user->getInvitationRegistrations()->all();
        $this->assertNotEmpty($invitationRegistrations);
        $this->assertCount(1, $invitationRegistrations);
        $this->assertEquals((string)$invitationRegistrations[0]->invitee, (string)$this->invitee);
    }

    /**
     * @group invitation
     * @group register
     * @depends testRegister
     */
    public function testDeregister()
    {
        $this->invitee = new User(['password' => '123456']);
        $this->assertTrue($this->invitee->registerAccordingToInvitation([], [], $this->user));
        $invitationRegistrations = $this->user->getInvitationRegistrations()->all();
        $this->assertCount(1, $invitationRegistrations);

        $this->assertTrue($this->invitee->deregister());
        $this->assertCount(0, $this->user->getInvitationRegistrations()->all());
    }

    /**
     * @group invitation
     * @group register
     * @depends testRegister
     */
    public function testGetInvitees()
    {
        $this->user->
    }
}
