<?php

/**
 *  _   __ __ _____ _____ ___  ____  _____
 * | | / // // ___//_  _//   ||  __||_   _|
 * | |/ // /(__  )  / / / /| || |     | |
 * |___//_//____/  /_/ /_/ |_||_|     |_|
 * @link https://vistart.me/
 * @copyright Copyright (c) 2016 - 2022 vistart
 * @license https://vistart.me/license/
 */

namespace rhosocial\user\tests\models\invitation;

use rhosocial\base\helpers\Number;
use rhosocial\user\models\exceptions\UserNotActiveException;
use rhosocial\user\models\invitation\exceptions\InvitationCodeNotEnabledException;
use rhosocial\user\models\invitation\migrations\m170603_122711_CreateInvitationTable;
use rhosocial\user\models\invitation\migrations\m220813_051356_CreateInvitationCodeTable;
use rhosocial\user\models\migrations\M170304140437CreateUserTable;
use rhosocial\user\models\migrations\M170304142349CreateProfileTable;
use rhosocial\user\models\migrations\M170307150614CreatePasswordHistoryTable;
use rhosocial\user\rbac\permissions\CreateUser;
use rhosocial\user\tests\data\models\invitation\Registration;
use rhosocial\user\tests\data\models\invitation\RegistrationCode;
use rhosocial\user\tests\data\models\user\User;
use rhosocial\user\tests\TestCase;
use yii\base\InvalidArgumentException;
use yii\db\ActiveQueryInterface;
use yii\db\IntegrityException;

/**
 * Class RegistrationTest
 * @package rhosocial\user\tests\models\invitation
 * @version 1.0
 * @author vistart <i@vistart.me>
 */
class RegistrationTest extends TestCase
{
    /**
     * @var User
     */
    protected $user;

    /**
     * Inactive user.
     * @var User
     */
    protected $inactiveUser;

    /**
     * @var User
     */
    protected $invitee;

    protected $migrations = [
        M170304140437CreateUserTable::class,
        M170304142349CreateProfileTable::class,
        M170307150614CreatePasswordHistoryTable::class,
        m220813_051356_CreateInvitationCodeTable::class,
        m170603_122711_CreateInvitationTable::class,
    ];

    /**
     * @todo User status cannot be set during initialization. The reason is pending.
     */
    protected function setUp() : void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->applyMigrations($this->migrations);
        $this->user = new User(['password' => '123456']);
        $this->inactiveUser = new User(['password' => '123456']); // Status cannot be set during initialization.
        $this->assertTrue($this->user->register());
        $this->inactiveUser->status = User::$statusInactive;
        $this->assertTrue($this->inactiveUser->register());
        $this->assertEquals(User::$statusInactive, $this->inactiveUser->status);
    }

    protected function tearDown() : void
    {
        if ($this->user && !$this->user->getIsNewRecord()) {
            $this->user->deregister();
        }
        if ($this->inactiveUser && !$this->inactiveUser->getIsNewRecord()) {
            $this->inactiveUser->deregister();
        }
        if ($this->invitee && !$this->invitee->getIsNewRecord()) {
            $this->invitee->deregister();
        }
        $this->revertMigrations($this->migrations);
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /**
     * @group invitation
     * @group register
     */
    public function testEmpty()
    {
        $this->assertInstanceOf(User::class, $this->user);
        $this->assertEmpty($this->user->invitationRegistrations);
    }

    /**
     * @group invitation
     * @group register
     * @depends testEmpty
     */
    public function testRegister()
    {
        $this->invitee = new User(['password' => '123456']);
        $this->assertTrue($this->invitee->registerByInvitation([], [], $this->user));
        $invitationRegistrations = $this->user->getInvitationRegistrations()->all();
        $this->assertNotEmpty($invitationRegistrations);
        $this->assertCount(1, $invitationRegistrations);
        $this->assertInstanceOf(User::class, $invitationRegistrations[0]->invitee);
        $this->assertEquals((string)$invitationRegistrations[0]->invitee, (string)$this->invitee);
        $this->assertEquals(Registration::INVITATION_REGISTRATION, $invitationRegistrations[0]->content);
    }

    /**
     * @group invitation
     * @group register
     * @depends testRegister
     */
    public function testDeregister()
    {
        $this->invitee = new User(['password' => '123456']);
        $this->assertTrue($this->invitee->registerByInvitation([], [], $this->user));
        $invitationRegistrations = $this->user->getInvitationRegistrations()->all();
        $this->assertCount(1, $invitationRegistrations);

        $this->assertTrue($this->invitee->deregister());
        $this->assertCount(0, $this->user->getInvitationRegistrations()->all());
    }

    /**
     * Test null user to invite registration.
     * @group invitation
     * @group register
     * @depends testRegister
     */
    public function testRegisterInvitedByNull() {
        $this->invitee = new User(['password' => '123456']);
        $this->expectException(InvalidArgumentException::class);
        $this->expectExceptionMessage("Inviter and Invitation Registration Code both invalid.");
        $this->invitee->registerByInvitation();
    }

    /**
     * Test new user to invite registration.
     * @group invitation
     * @group register
     * @depends testRegister
     */
    public function testRegisterInvitedByANewUser() {
        $user = new User(['password' => '123456']);
        $this->invitee = new User(['password' => '123456']);
        $this->expectException(InvalidArgumentException::class);
        $this->expectExceptionMessage("Inviter cannot be a new user.");
        $this->invitee->registerByInvitation([], [], $user);
    }

    /**
     * Test inactive user to invite registration.
     * @group invitation
     * @group register
     * @depends testRegister
     */
    public function testRegisterInvitedByAnInactiveInviter() {
        $this->assertFalse($this->inactiveUser->getIsNewRecord());
        $this->assertEquals(User::$statusInactive, $this->inactiveUser->status);
        $this->invitee = new User(['password' => '123456']);
        $this->expectException(UserNotActiveException::class);
        $this->expectExceptionMessage("The inviter is not currently an active user and cannot be as an inviter.");
        $this->invitee->registerByInvitation([], [], $this->inactiveUser);
    }

    /**
     * @group invitation
     * @group register
     * @depends testRegister
     */
    public function testGetInvitees()
    {
        $this->assertNotEmpty($this->user->invitationRegistrationClass);
        $class = $this->user->invitationRegistrationClass;
        $noInit = $class::buildNoInitModel();
        $invitationRegistrations = $this->user->getInvitationRegistrations()->andWhere(["<=", $noInit->createdAtAttribute, gmdate('Y-m-d H:i:s', time()-60)])->all();
        $this->assertEmpty($invitationRegistrations);

        $invitationRegistrations = $this->user->getInvitationRegistrations()->andWhere(['<=', $noInit->createdAtAttribute, gmdate('Y-m-d H:i:s', time()+60)])->all();
        $this->assertEmpty($invitationRegistrations);

        $this->invitee = new User(['password' => '123456']);
        $this->assertTrue($this->invitee->registerByInvitation([], [], $this->user));

        $invitationRegistrations = $this->user->getInvitationRegistrations()->andWhere(["<=", $noInit->createdAtAttribute, gmdate('Y-m-d H:i:s', time()-60)])->all();
        $this->assertEmpty($invitationRegistrations, 'The registration invitation should be empty.');

        $invitationRegistrations = $this->user->getInvitationRegistrations()->andWhere(['<=', $noInit->createdAtAttribute, gmdate('Y-m-d H:i:s', time()+60)])->all();
        $this->assertNotEmpty($invitationRegistrations);
        $this->assertCount(1, $invitationRegistrations);
        $this->assertEquals((string)$this->invitee, (string)$invitationRegistrations[0]->invitee);
    }

    /**
     * @group invitation
     * @group register
     * @depends testRegister
     */
    public function testFindByInvitee()
    {
        $this->assertEmpty($this->user->invitationRegistrations);
        $this->assertInstanceOf(User::class, $this->user);
        $invitations = Registration::findByInvitee($this->user)->all();
        $this->assertCount(0, $invitations);

        $this->invitee = new User(['password' => '123456']);
        $this->assertTrue($this->invitee->registerByInvitation([], [], $this->user));
        unset($this->user->invitationRegistrations);
        $this->assertCount(1, $this->user->invitationRegistrations);

        $invitations = Registration::findByInvitee($this->invitee)->all();
        $this->assertCount(1, $invitations);

        $this->assertEquals((string)$this->user, (string)$invitations[0]->host);
        $this->assertEquals((string)$this->invitee, (string)$invitations[0]->invitee);
    }

    /**
     * @group invitation
     * @group register
     * @depends testGetInvitees
     */
    public function testGetInviteesByMethod()
    {
        $this->assertEmpty($this->user->getInvitationRegistrations()->all());

        $this->invitee = new User(['password' => '123456']);
        $this->assertTrue($this->invitee->registerByInvitation([], [], $this->user));

        $this->assertEquals($this->invitee->guid, User::findIdentityByGuid($this->invitee)->guid);
        $registration = Registration::findByInvitee($this->invitee)->one();
        /* @var $registration Registration */
        $this->assertEquals((string)$this->invitee, $registration->invitee_guid);

        $invitations = $this->user->getInvitationRegistrations()->all();
        $this->assertNotEmpty($invitations);
        $this->assertCount(1, $this->user->invitationRegistrationInvitees);
        $this->assertEquals((string)$this->invitee, (string)$this->user->invitationRegistrationInvitees[0]);
    }

    /**
     * @group invitation
     * @group register
     * @depends testRegister
     */
    public function testNotAllowRepeated()
    {
        $this->assertEmpty($this->user->getInvitationRegistrations()->all());

        $this->invitee = new User(['password' => '123456']);
        $this->assertTrue($this->invitee->registerByInvitation([], [], $this->user));
        $invitations = $this->user->getInvitationRegistrations()->all();
        $this->assertNotEmpty($invitations);

        $invitation = $this->user->createInvitationRegistration($this->invitee);
        $this->assertInstanceOf(Registration::class, $invitation);
        $this->assertEquals((string)$invitations[0]->host, (string)$invitation->host);
        $this->assertEquals((string)$invitations[0]->content, (string)$invitation->content);
        $this->assertEquals((string)$invitations[0]->invitee, (string)$invitation->invitee);

        $this->assertFalse($invitation->save(), "Registration Invitation Instance cannot be Saved.");
    }

    /**
     * @group invitation
     * @group register
     * @depends testRegister
     */
    public function testRestrictContent()
    {
        // New Instance.
        $invitation = new Registration(['content' => 0]);
        $this->assertNotEquals(0, $invitation->content);
        $this->assertEquals(Registration::INVITATION_REGISTRATION, $invitation->content);
    }

    /**
     * A new user (which does not exist in the database) is not allowed to issue an invitation registration code.
     * @group invitation
     * @group register
     */
    public function testNewUserIssueInvitationRegistrationCode() {
        $user = new User(["password" => "123456"]);
        $this->expectException(InvalidArgumentException::class);
        $this->expectExceptionMessage("New user cannot issue invitation registration code.");
        $user->issueInvitationRegistrationCode();
    }

    /**
     * A new user (which does not exist in the database) is not allowed to issue invitation registration codes.
     * @group invitation
     * @group register
     */
    public function testNewUserIssueInvitationRegistrationCodes() {
        $user = new User(["password" => "123456"]);
        $this->expectException(InvalidArgumentException::class);
        $this->expectExceptionMessage("New user cannot issue invitation registration code.");
        $user->issueInvitationRegistrationCodes();
    }

    /**
     * Issue a invitation code when the invitation registration code is disabled.
     * @group invitation
     * @group register
     */
    public function testDisableInvitationRegistrationCodeIssueCode() {
        $this->assertFalse($this->user->getIsNewRecord());
        $this->user->invitationRegistrationCodeClass = false;
        $this->expectException(InvitationCodeNotEnabledException::class);
        $this->expectExceptionMessage("Invitation Registration Code has not been enabled yet.");
        $this->user->issueInvitationRegistrationCode();
    }

    /**
     * Issue a batch of invitation codes when the invitation registration code is disabled.
     * @group invitation
     * @group register
     */
    public function testDisableInvitationRegistrationCodeIssueCodes() {
        $this->assertFalse($this->user->getIsNewRecord());
        $this->user->invitationRegistrationCodeClass = false;
        $this->expectException(InvitationCodeNotEnabledException::class);
        $this->expectExceptionMessage("Invitation Registration Code has not been enabled yet.");
        $this->user->issueInvitationRegistrationCodes();
    }

    /**
     * Issue a invitation registration code, the invitation code is randomly generated.
     * The default generation rule is a 16-bit positive integer.
     * @group invitation
     * @group register
     */
    public function testIssueInvitationRegistrationCodeRandomly() {
        $this->assertFalse($this->user->getIsNewRecord());
        $this->assertTrue($this->user->hasEnabledInvitationRegistrationCode());
        $this->assertTrue($this->user->issueInvitationRegistrationCode());
        $code = $this->user->getLatestInvitationRegistrationCode();
        $this->assertInstanceOf(RegistrationCode::class, $code);
        $this->assertMatchesRegularExpression("/^\d{{$code->idAttributeLength}}$/", $code->code);;
    }

    /**
     * Issue an invitation registration code, the invitation code is predefined.
     * If the invitation code already exists, it is not allowed to issue the same invitation code.
     * @group invitation
     * @group register
     */
    public function testIssueInvitationRegistrationCodePredefined() {
        $noInitModel = $this->user->invitationRegistrationCodeClass::buildNoInitModel();
        /* @var noInitModel RegistrationCode */
        $length = $noInitModel->idAttributeLength;
        $code = Number::randomNumber("8451", $length);
        $remainingLength = $length - 4;
        $this->assertMatchesRegularExpression("/^8451\d{{$remainingLength}}$/", $code);
        $this->assertFalse($this->user->getIsNewRecord());
        $this->assertTrue($this->user->hasEnabledInvitationRegistrationCode());
        $this->assertTrue($this->user->issueInvitationRegistrationCode($code));
        $model = $this->user->getLatestInvitationRegistrationCode();
        $this->assertInstanceOf(RegistrationCode::class, $model);
        $this->assertEquals($code, $model->code);
        // Existing invitation code can no longer be issued, regardless of whether the issuer is me or someone else.
        $this->assertFalse($this->user->issueInvitationRegistrationCode($code));
        $user = new User(["password" => "123456"]);
        $this->assertTrue($user->register());
        $this->assertFalse($user->issueInvitationRegistrationCode($code));
    }

    /**
     * @group invitation
     * @group register
     */
    public function testIssueInvitationRegistrationCodes() {
        $number = 20;
        $this->assertTrue($this->user->issueInvitationRegistrationCodes($number));
        $codes = $this->user->getLatestInvitationRegistrationCodes()->limit($number)->all();
        $this->assertCount($number, $codes);
    }

    /**
     * @group invitation
     * @group register
     */
    public function testGetInvitationRegistrationCodeIssuer() {
        $this->assertTrue($this->user->issueInvitationRegistrationCode());
        $code = $this->user->getLatestInvitationRegistrationCode();
        $this->assertInstanceOf(RegistrationCode::class, $code);
        $user = $this->user->getInvitationRegistrationCodeIssuer($code)->one();
        $this->assertInstanceOf(User::class, $user);
        $this->assertEquals((string)$this->user, (string)$user);
    }
    
    public function testGetInvitationRegistrationCode() {
        
    }

    /**
     * Issue an invitation registration code, and invite a new user.
     * @group invitation
     * @group register
     */
    public function testIssueCodeAndInviteNewUser() {
        $this->assertTrue($this->user->issueInvitationRegistrationCode());
        $code = $this->user->getLatestInvitationRegistrationCode();
        $this->assertInstanceOf(RegistrationCode::class, $code);

        //
        
        $user = new User(["password" => "123456"]);
        $this->assertTrue($user->registerByInvitation(null, null, null, $code->code));
    }
}
