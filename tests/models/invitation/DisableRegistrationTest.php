<?php

/**
 *  _   __ __ _____ _____ ___  ____  _____
 * | | / // // ___//_  _//   ||  __||_   _|
 * | |/ // /(__  )  / / / /| || |     | |
 * |___//_//____/  /_/ /_/ |_||_|     |_|
 * @link https://vistart.me/
 * @copyright Copyright (c) 2016 - 2022 vistart
 * @license https://vistart.me/license/
 */
namespace rhosocial\user\tests\models\invitation;

use rhosocial\user\models\migrations\M170304140437CreateUserTable;
use rhosocial\user\tests\data\models\user\UserNotInvitationRegistration as User;
use rhosocial\user\tests\TestCase;
use yii\base\InvalidConfigException;

/**
 *
 */
class DisableRegistrationTest extends TestCase
{
    /**
     * @var User
     */
    protected $user;

    /**
     * @var User
     */
    protected $invitee;

    protected $migrations = [
        M170304140437CreateUserTable::class,
    ];

    protected function setUp() : void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->applyMigrations($this->migrations);
        $this->user = new User(['password' => '123456']);
        $this->assertTrue($this->user->register());
    }

    protected function tearDown() : void
    {
        if ($this->user && !$this->user->getIsNewRecord()) {
            $this->user->deregister();
        }
        if ($this->invitee && !$this->invitee->getIsNewRecord()) {
            $this->invitee->deregister();
        }
        $this->revertMigrations($this->migrations);
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /**
     * Test registerByInvitation() and throw an exception.
     * @group invitation
     * @group register
     */
    public function testNew() {
        $this->invitee = new User(['password' => '123456']);
        $this->expectException(InvalidConfigException::class);
        $this->expectExceptionMessage("Invitation registration is not enabled.");
        $this->assertTrue($this->invitee->registerByInvitation([], [], $this->user));
    }

    /**
     * Test getInvitationRegistrations() and return null if invitation registration disabled.
     * @group invitation
     * @group register
     */
    public function testGetInvitationRegistrations() {
        $this->assertNull($this->user->getInvitationRegistrations());
    }

    /**
     * Test getInvitationRegistrationInvitees() and return null if invitation registration disabled.
     * @group invitation
     * @group register
     */
    public function testGetInvitationRegistrationInvitees() {
        $this->assertNull($this->user->getInvitationRegistrationInvitees());
    }
}